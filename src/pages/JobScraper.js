import { AlertCircle, Briefcase, Building, Clock, Download, ExternalLink, MapPin, Search } from 'lucide-react';
import { useState } from 'react';
import toast from 'react-hot-toast';
import { RealJobSearchService } from '../services/realJobSearchService.js';

const JobScraper = () => {
  const [searchData, setSearchData] = useState({
    jobTitle: '',
    location: 'India',
    count: 5
  });
  const [loading, setLoading] = useState(false);
  const [jobs, setJobs] = useState([]);
  const [error, setError] = useState('');
  const [searchUrls, setSearchUrls] = useState([]);
  const [jobSource, setJobSource] = useState('');
  
  const realJobSearchService = new RealJobSearchService();

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setSearchData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSearch = async (e) => {
    e.preventDefault();
    
    if (!searchData.jobTitle.trim()) {
      toast.error('Please enter a job title');
      return;
    }

    setLoading(true);
    setError('');
    setJobs([]);
    const loadingToast = toast.loading('Scraping LinkedIn jobs...');

    try {
      // Parse job titles (comma-separated)
      const jobTitles = searchData.jobTitle
        .split(',')
        .map(title => title.trim())
        .filter(title => title.length > 0);

      if (jobTitles.length === 0) {
        throw new Error('Please enter valid job titles');
      }

      // Create resume data from search input
      const resumeData = {
        skills: jobTitles, // Use job titles as skills for searching
        location: searchData.location,
        experience: 3 // Default experience level
      };

      console.log('Searching for real jobs with data:', resumeData);

      // Use real job search service for actual LinkedIn jobs
      const jobResults = await realJobSearchService.searchJobsAlignedWithResume(
        resumeData, 
        parseInt(searchData.count)
      );

      if (!jobResults.success) {
        throw new Error(jobResults.error || 'Job search failed');
      }

      // Set job source info
      setJobSource(jobResults.source || 'Unknown');

      // Set search URLs if available
      setSearchUrls(jobResults.searchUrls || []);

      // Transform real job results for display
      const transformedJobs = jobResults.jobs.map((job, index) => ({
        id: index + 1,
        title: job.title,
        company: job.company,
        location: job.location,
        type: job.type || 'Full-time',
        postedDate: job.postedDate || 'Recently posted',
        description: job.description || job.relevanceReason || 'No description available',
        url: job.url,
        matchScore: job.matchScore || 0,
        source: jobResults.source
      }));

      setJobs(transformedJobs);
      
      const successMessage = jobResults.source === 'LinkedIn (Real Data)' 
        ? `Found ${transformedJobs.length} real LinkedIn jobs!`
        : `Generated ${transformedJobs.length} job recommendations!`;
        
      toast.success(successMessage, { id: loadingToast });

    } catch (error) {
      console.error('Job search error:', error);
      setError(error.message || 'Failed to search jobs. Please try again.');
      toast.error('Search failed', { id: loadingToast });
    } finally {
      setLoading(false);
    }
  };

  const downloadJobsReport = () => {
    if (jobs.length === 0) return;

    const report = `LINKEDIN JOBS REPORT
Generated: ${new Date().toLocaleDateString()}
Search Terms: ${searchData.jobTitle}
Location: ${searchData.location}
Total Jobs Found: ${jobs.length}

${'='.repeat(80)}

${jobs.map((job, index) => `
JOB ${index + 1}:
Company: ${job.company}
Title: ${job.title}
Location: ${job.location}
URL: ${job.url}

Description:
${job.description}

${'='.repeat(80)}
`).join('\n')}

---
Generated by AI Resume Analyzer - GenAI Hackathon 2025
    `;
    
    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `linkedin-jobs-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
    toast.success('Jobs report downloaded!');
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 py-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            Real LinkedIn Job Search
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Find actual job listings from LinkedIn aligned with your skills and experience
          </p>
        </div>

        <div className="bg-white rounded-xl shadow-lg p-8 mb-8">
          <form onSubmit={handleSearch} className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              <div className="lg:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Job Titles (comma-separated)
                </label>
                <div className="relative">
                  <Briefcase className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                  <input
                    type="text"
                    name="jobTitle"
                    value={searchData.jobTitle}
                    onChange={handleInputChange}
                    placeholder="e.g., Software Engineer, Data Scientist, Product Manager"
                    className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    required
                  />
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Location
                </label>
                <div className="relative">
                  <MapPin className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                  <input
                    type="text"
                    name="location"
                    value={searchData.location}
                    onChange={handleInputChange}
                    placeholder="e.g., India, Bangalore, Remote"
                    className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                  />
                </div>
              </div>
            </div>

            <div className="flex items-center justify-between">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Number of Jobs
                </label>
                <select
                  name="count"
                  value={searchData.count}
                  onChange={handleInputChange}
                  className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                >
                  <option value={5}>5 jobs</option>
                  <option value={10}>10 jobs</option>
                  <option value={15}>15 jobs</option>
                  <option value={25}>25 jobs</option>
                </select>
              </div>

              <button
                type="submit"
                disabled={loading}
                className="px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
              >
                {loading ? (
                  <>
                    <div className="animate-spin w-5 h-5 border-2 border-white border-t-transparent rounded-full"></div>
                    Finding Jobs...
                  </>
                ) : (
                  <>
                    <Search className="w-5 h-5" />
                    Find Jobs
                  </>
                )}
              </button>
            </div>
          </form>
        </div>

        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
          <div className="flex items-start gap-3">
            <AlertCircle className="w-5 h-5 text-blue-600 mt-0.5" />
            <div>
              <h3 className="text-sm font-medium text-blue-800">
                Smart Job Search
              </h3>
              <p className="text-sm text-blue-700 mt-1">
                This feature generates LinkedIn search URLs and job recommendations based on your input. 
                Click the generated links to browse actual job listings on LinkedIn. The system provides 
                intelligent job matching with mock recommendations for demonstration purposes.
              </p>
            </div>
          </div>
        </div>

        {error && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
            <div className="flex items-start gap-3">
              <AlertCircle className="w-5 h-5 text-red-600 mt-0.5" />
              <p className="text-red-800">{error}</p>
            </div>
          </div>
        )}

        {searchUrls.length > 0 && (
          <div className="bg-white rounded-lg shadow-md border border-gray-200 p-6 mb-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
              <ExternalLink className="w-5 h-5" />
              LinkedIn Search URLs
            </h3>
            <p className="text-gray-600 mb-4">
              Click these links to browse actual LinkedIn job listings based on your search criteria:
            </p>
            <div className="space-y-3">
              {searchUrls.map((urlData, index) => (
                <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <div>
                    <p className="font-medium text-gray-900">{urlData.skill}</p>
                    <p className="text-sm text-gray-600">{urlData.description}</p>
                  </div>
                  <a
                    href={urlData.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2 text-sm"
                  >
                    <ExternalLink className="w-4 h-4" />
                    Search LinkedIn
                  </a>
                </div>
              ))}
            </div>
          </div>
        )}

        {jobs.length > 0 && (
          <div className="space-y-6">
            <div className="flex items-center justify-between bg-white rounded-lg p-4">
              <div>
                <h2 className="text-2xl font-bold text-gray-900">
                  Found {jobs.length} Jobs
                </h2>
                {jobSource && (
                  <p className="text-sm text-gray-600 mt-1">
                    Source: <span className="font-medium text-blue-600">{jobSource}</span>
                  </p>
                )}
              </div>
              <button
                onClick={downloadJobsReport}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 focus:ring-2 focus:ring-green-500 flex items-center gap-2"
              >
                <Download className="w-4 h-4" />
                Download Report
              </button>
            </div>

            <div className="grid gap-6">
              {jobs.map((job) => (
                <div key={job.id} className="bg-white rounded-lg shadow-md border border-gray-200 p-6 hover:shadow-lg transition-shadow">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <h3 className="text-xl font-semibold text-gray-900">
                          {job.title}
                        </h3>
                        {job.matchScore && (
                          <span className="px-2 py-1 bg-green-100 text-green-800 text-xs font-medium rounded-full">
                            {job.matchScore}% match
                          </span>
                        )}
                      </div>
                      <div className="flex items-center gap-4 text-gray-600 mb-2">
                        <div className="flex items-center gap-1">
                          <Building className="w-4 h-4" />
                          <span className="font-medium text-blue-600">{job.company}</span>
                        </div>
                        <div className="flex items-center gap-1">
                          <MapPin className="w-4 h-4" />
                          <span>{job.location}</span>
                        </div>
                        <div className="flex items-center gap-1">
                          <Clock className="w-4 h-4" />
                          <span>{job.postedDate}</span>
                        </div>
                      </div>
                    </div>
                    {job.url && (
                      <a
                        href={job.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors flex items-center gap-2 text-sm whitespace-nowrap"
                      >
                        <ExternalLink className="w-4 h-4" />
                        View Job
                      </a>
                    )}
                  </div>

                  {job.description && job.description !== 'Description not available' && (
                    <div className="border-t pt-4">
                      <h4 className="font-medium text-gray-900 mb-2">Job Description:</h4>
                      <div className="text-gray-700 text-sm leading-relaxed bg-gray-50 p-4 rounded-lg max-h-40 overflow-y-auto">
                        {job.description.length > 500 
                          ? `${job.description.substring(0, 500)}...` 
                          : job.description
                        }
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default JobScraper;