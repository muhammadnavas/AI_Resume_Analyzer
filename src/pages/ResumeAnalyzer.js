import { AlertTriangle, BarChart3, Download, FileText, Key, Lightbulb, Target, TrendingUp } from 'lucide-react';
import { useState } from 'react';
import toast from 'react-hot-toast';
import FileUpload from '../components/FileUpload';
import { useApiKey } from '../context/ApiKeyContext';
import { DocumentProcessor } from '../services/documentProcessor';
import { ResumeAnalyzer as ResumeAnalyzerService } from '../services/resumeAnalyzer';
import { TextFormatter } from '../utils/textFormatter';

const ResumeAnalyzer = () => {
  const { geminiApiKey, updateGeminiApiKey, hasGeminiKey, isFromEnv, canModifyKey } = useApiKey();
  const [tempApiKey, setTempApiKey] = useState('');
  const [file, setFile] = useState(null);
  const [processing, setProcessing] = useState(false);
  const [analysisResults, setAnalysisResults] = useState(null);
  const [activeTab, setActiveTab] = useState('summary');

  const handleApiKeySubmit = (e) => {
    e.preventDefault();
    if (!canModifyKey) {
      if (isFromEnv) {
        toast.error('API key is configured via environment variables and cannot be changed.');
      } else {
        toast.error('Local storage fallback is disabled. Please configure API key in environment variables.');
      }
      return;
    }
    
    if (tempApiKey.trim()) {
      updateGeminiApiKey(tempApiKey.trim());
      setTempApiKey('');
      toast.success('API key saved successfully!');
    }
  };

  const handleFileSelect = (selectedFile) => {
    setFile(selectedFile);
    if (analysisResults) {
      setAnalysisResults(null);
    }
  };

  const handleAnalyze = async () => {
    if (!file || !hasGeminiKey) {
      toast.error('Please upload a file and provide a valid API key');
      return;
    }

    setProcessing(true);
    const loadingToast = toast.loading('Analyzing your resume...');

    try {
      // Get file type for user feedback
      const fileType = DocumentProcessor.getFileType(file);
      const fileTypeText = fileType.toUpperCase();
      
      // Step 1: Process Document (PDF or DOCX)
      toast.loading(`Extracting text from ${fileTypeText}...`, { id: loadingToast });
      const documentData = await DocumentProcessor.processResumeDocument(file);
      
      // Step 2: Analyze with Gemini
      toast.loading('Performing AI analysis...', { id: loadingToast });
      const analyzer = new ResumeAnalyzerService(geminiApiKey);
      const analysis = await analyzer.performCompleteAnalysis(documentData.chunks);
      
      // Combine document data with analysis
      const results = {
        ...analysis,
        documentData,
        fileName: file.name,
        fileType: fileType
      };
      
      setAnalysisResults(results);
      toast.success('Analysis completed successfully!', { id: loadingToast });
      
    } catch (error) {
      console.error('Analysis error:', error);
      toast.error(error.message || 'Failed to analyze resume', { id: loadingToast });
    } finally {
      setProcessing(false);
    }
  };

  const downloadReport = () => {
    if (!analysisResults) return;
    
    const report = `
RESUME ANALYSIS REPORT
Generated on: ${new Date().toLocaleString()}
File: ${analysisResults.fileName}

OVERALL SCORE: ${analysisResults.rating.totalScore || analysisResults.rating.overallScore}/10
GRADE: ${analysisResults.rating.grade || 'N/A'}

PROFESSIONAL SUMMARY:
${analysisResults.professionalSummary}

DETAILED ANALYSIS:

SUMMARY:
${analysisResults.summary}

STRENGTHS:
${analysisResults.strengths}

AREAS FOR IMPROVEMENT:
${analysisResults.weaknesses}

JOB TITLE SUGGESTIONS:
${analysisResults.jobTitles}

PROFESSIONAL RATING BREAKDOWN (Based on Recruiter Standards):
- Content Quality: ${analysisResults.rating.categories?.content || analysisResults.rating.contentQuality || 'N/A'}/2
- Structure & Flow: ${analysisResults.rating.categories?.structure || analysisResults.rating.skillsPresentation || 'N/A'}/2
- Visual Formatting: ${analysisResults.rating.categories?.formatting || analysisResults.rating.experienceDescription || 'N/A'}/2
- Achievement Impact: ${analysisResults.rating.categories?.impact || analysisResults.rating.achievementHighlights || 'N/A'}/2
- ATS Compatibility: ${analysisResults.rating.categories?.ats || analysisResults.rating.educationCertifications || 'N/A'}/2

${analysisResults.rating.improvements && analysisResults.rating.improvements.length > 0 ? `
KEY IMPROVEMENT AREAS:
${analysisResults.rating.improvements.map(improvement => `- ${improvement}`).join('\n')}
` : ''}
---
Generated by AI Resume Analyzer - GenAI Hackathon 2025
    `;
    
    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `resume-analysis-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
    toast.success('Report downloaded successfully!');
  };

  const getScoreColor = (score) => {
    if (score >= 2) return 'text-green-600 bg-green-100';
    if (score >= 1) return 'text-yellow-600 bg-yellow-100';
    return 'text-red-600 bg-red-100';
  };

  const getScoreRing = (score) => {
    if (score >= 8) return 'text-green-500';
    if (score >= 6) return 'text-yellow-500';
    return 'text-red-500';
  };

  const getGradeColor = (grade) => {
    switch (grade) {
      case 'A': return 'text-green-800 bg-green-200';
      case 'B': return 'text-blue-800 bg-blue-200';
      case 'C': return 'text-yellow-800 bg-yellow-200';
      case 'D': return 'text-orange-800 bg-orange-200';
      case 'F': return 'text-red-800 bg-red-200';
      default: return 'text-gray-800 bg-gray-200';
    }
  };

  const tabs = [
    { id: 'summary', label: 'Summary', icon: FileText, color: 'blue', description: 'Overall resume analysis' },
    { id: 'strengths', label: 'Strengths', icon: TrendingUp, color: 'green', description: 'Key advantages & skills' },
    { id: 'weaknesses', label: 'Improvements', icon: AlertTriangle, color: 'orange', description: 'Areas to enhance' },
    { id: 'jobs', label: 'Job Suggestions', icon: Target, color: 'purple', description: 'Recommended positions' },
    { id: 'rating', label: 'Rating', icon: BarChart3, color: 'indigo', description: 'Professional scoring' }
  ];

  if (!hasGeminiKey) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 via-blue-50 to-indigo-100 flex items-center justify-center p-4">
        <div className="max-w-lg w-full bg-white/80 backdrop-blur-md rounded-2xl shadow-2xl p-8 border border-white/20">
          <div className="text-center mb-6">
            <div className="w-20 h-20 bg-gradient-to-br from-blue-500 via-purple-500 to-indigo-600 rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105">
              <Key className="w-10 h-10 text-white" />
            </div>
            <h2 className="text-2xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 bg-clip-text text-transparent mb-2">API Key Configuration</h2>
            <p className="text-gray-600 leading-relaxed">
              Configure your Google Gemini API key to start analyzing resumes with AI-powered insights
            </p>
          </div>

          {/* Environment Setup Instructions */}
          <div className="mb-6 p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl border border-green-200/50">
            <h3 className="font-semibold text-green-800 mb-2 flex items-center">
              <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
              </svg>
              Recommended: Environment Variables
            </h3>
            <div className="text-sm text-green-700 space-y-2">
              <p>1. Create or edit <code className="bg-green-200/50 px-2 py-1 rounded">.env</code> file in project root</p>
              <p>2. Add: <code className="bg-green-200/50 px-2 py-1 rounded">REACT_APP_GEMINI_API_KEY=your_api_key</code></p>
              <p>3. Restart the development server</p>
              <p className="text-xs opacity-80">✅ More secure and won't be committed to version control</p>
            </div>
          </div>
          
          {canModifyKey ? (
            <>
              <div className="mb-4 p-3 bg-amber-50 rounded-lg border border-amber-200">
                <p className="text-xs text-amber-700">
                  <strong>Fallback Mode:</strong> You can temporarily enter your API key below, but environment variables are recommended for security.
                </p>
              </div>
              
              <form onSubmit={handleApiKeySubmit} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Google Gemini API Key (Temporary)
                  </label>
                  <input
                    type="password"
                    value={tempApiKey}
                    onChange={(e) => setTempApiKey(e.target.value)}
                    placeholder="Enter your Gemini API key..."
                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 hover:border-gray-400"
                    required
                  />
                </div>
                <button
                  type="submit"
                  className="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white py-3 px-4 rounded-xl hover:from-blue-700 hover:to-purple-700 transition-all duration-200 transform hover:scale-105 font-medium shadow-lg hover:shadow-xl"
                >
                  Save API Key (Temporary)
                </button>
              </form>
            </>
          ) : (
            <div className="p-4 bg-red-50 rounded-xl border border-red-200">
              <h3 className="font-semibold text-red-800 mb-2">Environment Configuration Required</h3>
              <p className="text-sm text-red-700">
                Local storage fallback is disabled. Please configure your API key using environment variables as shown above.
              </p>
            </div>
          )}
          
          <div className="mt-6 p-4 bg-blue-50/80 rounded-xl border border-blue-200/50">
            <p className="text-xs text-blue-700 leading-relaxed">
              <strong>Get API Key:</strong> Visit <a href="https://ai.google.dev/" target="_blank" rel="noopener noreferrer" className="underline hover:text-blue-800">Google AI Studio</a> to create your free Gemini API key.
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen">
      <div className="max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 bg-clip-text text-transparent mb-2">Resume Analyzer</h1>
          <p className="text-gray-600 text-lg">
            Upload your resume and get AI-powered insights to improve your career prospects
          </p>
          
          {/* Status Indicators */}
          <div className="flex flex-wrap gap-4 mt-6">
            <div className={`flex items-center space-x-2 px-4 py-2 rounded-xl border ${
              hasGeminiKey 
                ? 'bg-green-50 border-green-200 text-green-700' 
                : 'bg-red-50 border-red-200 text-red-700'
            }`}>
              <Key className="w-4 h-4" />
              <span className="text-sm font-medium">
                API Key: {hasGeminiKey ? (isFromEnv ? 'Environment' : 'Local') : 'Not Set'}
              </span>
              {hasGeminiKey && <span className="text-green-500">✓</span>}
              {!hasGeminiKey && <span className="text-red-500">✗</span>}
              {isFromEnv && <span className="text-xs bg-green-200 text-green-800 px-2 py-1 rounded ml-2">ENV</span>}
            </div>
            
            <div className={`flex items-center space-x-2 px-4 py-2 rounded-xl border ${
              file 
                ? 'bg-green-50 border-green-200 text-green-700' 
                : 'bg-gray-50 border-gray-200 text-gray-600'
            }`}>
              <FileText className="w-4 h-4" />
              <span className="text-sm font-medium">
                File: {file ? file.name : 'No file selected'}
              </span>
              {file && <span className="text-green-500">✓</span>}
            </div>
            
            <div className={`flex items-center space-x-2 px-4 py-2 rounded-xl border ${
              hasGeminiKey && file 
                ? 'bg-blue-50 border-blue-200 text-blue-700' 
                : 'bg-gray-50 border-gray-200 text-gray-600'
            }`}>
              <BarChart3 className="w-4 h-4" />
              <span className="text-sm font-medium">
                Status: {hasGeminiKey && file ? 'Ready to Analyze' : 'Setup Required'}
              </span>
              {hasGeminiKey && file && <span className="text-blue-500">✓</span>}
            </div>
          </div>
        </div>

        {/* Upload Section */}
        <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow-xl p-8 mb-8 border border-white/20 hover:shadow-2xl transition-all duration-300">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-2xl font-semibold text-gray-900 flex items-center">
              <FileText className="w-6 h-6 mr-3 text-blue-600" />
              Upload Resume
            </h2>
            
            {/* API Key Quick Setup */}
            {!hasGeminiKey && canModifyKey && (
              <div className="flex items-center space-x-2">
                <form onSubmit={handleApiKeySubmit} className="flex items-center space-x-2">
                  <input
                    type="password"
                    placeholder="Enter Gemini API Key (Temporary)"
                    value={tempApiKey}
                    onChange={(e) => setTempApiKey(e.target.value)}
                    className="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                  <button
                    type="submit"
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg text-sm hover:bg-blue-700 transition-colors"
                  >
                    Save
                  </button>
                </form>
              </div>
            )}
            
            {!hasGeminiKey && !canModifyKey && (
              <div className="flex items-center space-x-2 text-sm text-amber-700 bg-amber-50 px-3 py-2 rounded-lg border border-amber-200">
                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                </svg>
                <span>Configure API key in .env file</span>
              </div>
            )}
          </div>
          
          <FileUpload 
            onFileSelect={handleFileSelect} 
            isProcessing={processing} 
          />
          
          {file && !processing && (
            <div className="mt-8 flex justify-center">
              <button
                onClick={handleAnalyze}
                disabled={processing || !hasGeminiKey}
                className="bg-gradient-to-r from-blue-600 to-purple-600 text-white px-8 py-4 rounded-xl hover:from-blue-700 hover:to-purple-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-all duration-200 flex items-center space-x-3 font-medium shadow-lg hover:shadow-xl transform hover:scale-105"
              >
                <BarChart3 className="w-5 h-5" />
                <span>Analyze Resume</span>
              </button>
            </div>
          )}
        </div>

        {/* Results Section */}
        {analysisResults && (
          <div className="space-y-8">
            {/* Quick Stats */}
            <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow-xl p-8 border border-white/20 hover:shadow-2xl transition-all duration-300">
              <div className="flex justify-between items-center mb-8">
                <h2 className="text-2xl font-semibold text-gray-900 flex items-center">
                  <BarChart3 className="w-6 h-6 mr-3 text-blue-600" />
                  Analysis Results
                </h2>
                <button
                  onClick={downloadReport}
                  className="flex items-center space-x-2 text-blue-600 hover:text-blue-700 transition-all duration-200 bg-blue-50 hover:bg-blue-100 px-4 py-2 rounded-xl font-medium transform hover:scale-105"
                >
                  <Download className="w-4 h-4" />
                  <span>Download Report</span>
                </button>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div className="text-center p-6 bg-gradient-to-br from-blue-50 to-indigo-50 rounded-2xl border border-blue-200/50 hover:scale-105 transition-all duration-300">
                  <div className={`text-4xl font-bold mb-2 ${getScoreRing(analysisResults.rating.totalScore || analysisResults.rating.overallScore)}`}>
                    {analysisResults.rating.totalScore || analysisResults.rating.overallScore}/10
                  </div>
                  <div className="text-sm text-gray-600 font-medium">Overall Score</div>
                </div>
                <div className="text-center p-6 bg-gradient-to-br from-green-50 to-emerald-50 rounded-2xl border border-green-200/50 hover:scale-105 transition-all duration-300">
                  <div className="text-3xl font-bold text-gray-900 mb-2">
                    {analysisResults.documentData.analysis.wordCount}
                  </div>
                  <div className="text-sm text-gray-600 font-medium">Words</div>
                </div>
                <div className="text-center p-6 bg-gradient-to-br from-purple-50 to-violet-50 rounded-2xl border border-purple-200/50 hover:scale-105 transition-all duration-300">
                  <div className="text-3xl font-bold text-gray-900 mb-2">
                    {analysisResults.documentData.metadata.pageCount}
                  </div>
                  <div className="text-sm text-gray-600 font-medium">
                    {analysisResults.fileType === 'pdf' ? 'Pages' : 'Document'}
                  </div>
                </div>
                <div className="text-center p-6 bg-gradient-to-br from-orange-50 to-amber-50 rounded-2xl border border-orange-200/50 hover:scale-105 transition-all duration-300">
                  <div className="text-3xl font-bold text-gray-900 mb-2">
                    {analysisResults.documentData.analysis.estimatedReadingTime}m
                  </div>
                  <div className="text-sm text-gray-600 font-medium">Read Time</div>
                </div>
              </div>
            </div>

            {/* Professional Summary */}
            <div className="bg-gradient-to-br from-blue-50 via-purple-50 to-indigo-50 rounded-3xl p-10 border border-blue-200/50 shadow-xl hover:shadow-2xl transition-all duration-500 transform hover:scale-[1.01]">
              <div className="flex items-center space-x-4 mb-8">
                <div className="w-14 h-14 bg-gradient-to-br from-blue-500 via-purple-500 to-indigo-600 rounded-2xl flex items-center justify-center shadow-lg">
                  <Lightbulb className="w-7 h-7 text-white" />
                </div>
                <div>
                  <h3 className="text-2xl font-bold text-gray-900 mb-1">AI-Generated Professional Summary</h3>
                  <p className="text-gray-600 text-sm">Personalized assessment based on your resume content</p>
                </div>
              </div>
              <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-8 border border-white/60 shadow-inner">
                <div className="relative">
                  <div className="absolute -top-2 -left-2 text-6xl text-blue-200/50 font-serif leading-none">"</div>
                  <div className="absolute -bottom-6 -right-2 text-6xl text-blue-200/50 font-serif leading-none">"</div>
                  <div className="relative px-8 py-4">
                    <p className="text-gray-800 leading-loose text-lg font-normal tracking-wide">
                      {TextFormatter.formatWithMarkdownSupport(analysisResults.professionalSummary)}
                    </p>
                  </div>
                </div>
                <div className="mt-6 pt-4 border-t border-gray-200/50">
                  <div className="flex items-center justify-center space-x-2 text-sm text-gray-500">
                    <span className="w-2 h-2 bg-blue-400 rounded-full animate-pulse"></span>
                    <span>Generated by Advanced AI Analysis</span>
                    <span className="w-2 h-2 bg-purple-400 rounded-full animate-pulse"></span>
                  </div>
                </div>
              </div>
            </div>

            {/* Tabs */}
            <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow-xl overflow-hidden border border-white/20 hover:shadow-2xl transition-all duration-300">
              <div className="border-b border-gray-200/50 bg-gradient-to-r from-gray-50 via-blue-50 to-purple-50">
                <nav className="flex flex-wrap gap-2 p-4">
                  {tabs.map((tab) => {
                    const colorClasses = {
                      blue: activeTab === tab.id ? 'bg-blue-500 text-white shadow-lg' : 'bg-blue-50 text-blue-700 hover:bg-blue-100',
                      green: activeTab === tab.id ? 'bg-green-500 text-white shadow-lg' : 'bg-green-50 text-green-700 hover:bg-green-100',
                      orange: activeTab === tab.id ? 'bg-orange-500 text-white shadow-lg' : 'bg-orange-50 text-orange-700 hover:bg-orange-100',
                      purple: activeTab === tab.id ? 'bg-purple-500 text-white shadow-lg' : 'bg-purple-50 text-purple-700 hover:bg-purple-100',
                      indigo: activeTab === tab.id ? 'bg-indigo-500 text-white shadow-lg' : 'bg-indigo-50 text-indigo-700 hover:bg-indigo-100'
                    };
                    
                    return (
                      <button
                        key={tab.id}
                        onClick={() => setActiveTab(tab.id)}
                        className={`flex-1 min-w-0 px-4 py-3 rounded-xl font-medium text-sm transition-all duration-300 flex flex-col items-center space-y-1 transform hover:scale-105 ${colorClasses[tab.color]}`}
                      >
                        <div className="flex items-center space-x-2">
                          <tab.icon className="w-4 h-4" />
                          <span className="font-semibold">{tab.label}</span>
                        </div>
                        {tab.description && (
                          <span className="text-xs opacity-80 hidden sm:block">
                            {tab.description}
                          </span>
                        )}
                      </button>
                    );
                  })}
                </nav>
              </div>

              <div className="p-8 bg-gradient-to-br from-white to-gray-50/50">
                {activeTab === 'summary' && (
                  <div className="prose max-w-none">
                    <div className="flex items-center space-x-3 mb-6">
                      <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
                        <FileText className="w-4 h-4 text-white" />
                      </div>
                      <h3 className="text-2xl font-bold text-gray-900">Resume Summary</h3>
                    </div>
                    <FormattedContent content={analysisResults.summary} />
                  </div>
                )}

                {activeTab === 'strengths' && (
                  <div className="prose max-w-none">
                    <div className="flex items-center space-x-3 mb-6">
                      <div className="w-8 h-8 bg-gradient-to-br from-green-500 to-green-600 rounded-lg flex items-center justify-center">
                        <TrendingUp className="w-4 h-4 text-white" />
                      </div>
                      <h3 className="text-2xl font-bold text-gray-900">Key Strengths</h3>
                    </div>
                    <FormattedContent content={analysisResults.strengths} />
                  </div>
                )}

                {activeTab === 'weaknesses' && (
                  <div className="prose max-w-none">
                    <div className="flex items-center space-x-3 mb-6">
                      <div className="w-8 h-8 bg-gradient-to-br from-orange-500 to-orange-600 rounded-lg flex items-center justify-center">
                        <AlertTriangle className="w-4 h-4 text-white" />
                      </div>
                      <h3 className="text-2xl font-bold text-gray-900">Areas for Improvement</h3>
                    </div>
                    <FormattedContent content={analysisResults.weaknesses} />
                  </div>
                )}

                {activeTab === 'jobs' && (
                  <div className="prose max-w-none">
                    <div className="flex items-center space-x-3 mb-6">
                      <div className="w-8 h-8 bg-gradient-to-br from-purple-500 to-purple-600 rounded-lg flex items-center justify-center">
                        <Target className="w-4 h-4 text-white" />
                      </div>
                      <h3 className="text-2xl font-bold text-gray-900">Recommended Job Titles</h3>
                    </div>
                    <FormattedContent content={analysisResults.jobTitles} />
                  </div>
                )}

                {activeTab === 'rating' && (
                  <div>
                    <div className="flex items-center space-x-3 mb-6">
                      <div className="w-8 h-8 bg-gradient-to-br from-indigo-500 to-indigo-600 rounded-lg flex items-center justify-center">
                        <BarChart3 className="w-4 h-4 text-white" />
                      </div>
                      <h3 className="text-2xl font-bold text-gray-900">Professional Resume Rating</h3>
                    </div>
                    
                    {/* Overall Grade */}
                    <div className="mb-6 p-6 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200">
                      <div className="flex items-center justify-between">
                        <div>
                          <h4 className="text-lg font-bold text-blue-900">Overall Grade</h4>
                          <p className="text-blue-700">Based on professional recruiter standards</p>
                        </div>
                        <div className="text-right">
                          <div className="text-3xl font-bold text-blue-900">
                            {analysisResults.rating.totalScore}/10
                          </div>
                          <div className={`px-4 py-2 rounded-full text-sm font-semibold ${getGradeColor(analysisResults.rating.grade)}`}>
                            Grade: {analysisResults.rating.grade}
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Category Breakdown */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                      {[
                        { key: 'content', label: 'Content Quality', description: 'Clarity, relevance, and impact', icon: '📝' },
                        { key: 'structure', label: 'Structure & Flow', description: 'Organization and readability', icon: '🏗️' },
                        { key: 'formatting', label: 'Visual Formatting', description: 'Design and presentation', icon: '🎨' },
                        { key: 'impact', label: 'Achievement Impact', description: 'Quantified accomplishments', icon: '🎯' },
                        { key: 'ats', label: 'ATS Compatibility', description: 'Keyword optimization', icon: '🤖' }
                      ].map((item) => {
                        // Map rating properties to the correct keys
                        const scoreMap = {
                          content: analysisResults.rating.contentQuality || 0,
                          structure: analysisResults.rating.structureOrganization || 0,
                          formatting: analysisResults.rating.formattingDesign || 0,
                          impact: analysisResults.rating.impactLanguage || 0,
                          ats: analysisResults.rating.atsCompatibility || 0
                        };
                        const score = scoreMap[item.key] || 0;
                        const percentage = (score / 2) * 100;
                        return (
                          <div key={item.key} className="p-6 bg-gradient-to-br from-white to-gray-50 border border-gray-200/60 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105">
                            <div className="flex items-center justify-between mb-4">
                              <div className="flex items-center space-x-3">
                                <span className="text-2xl">{item.icon}</span>
                                <div>
                                  <span className="text-sm font-semibold text-gray-900">{item.label}</span>
                                  <p className="text-xs text-gray-600">{item.description}</p>
                                </div>
                              </div>
                              <span className={`px-3 py-1 rounded-full text-sm font-bold ${getScoreColor(score)}`}>
                                {score}/2
                              </span>
                            </div>
                            {/* Progress Bar */}
                            <div className="relative">
                              <div className="flex mb-2 items-center justify-between">
                                <div className="text-xs font-medium text-gray-700">Progress</div>
                                <div className="text-xs text-gray-600">{percentage.toFixed(0)}%</div>
                              </div>
                              <div className="overflow-hidden h-3 text-xs flex rounded-xl bg-gray-200">
                                <div 
                                  style={{ width: `${percentage}%` }}
                                  className={`shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center transition-all duration-1000 ease-out ${
                                    score >= 2 ? 'bg-gradient-to-r from-green-400 to-green-600' :
                                    score >= 1 ? 'bg-gradient-to-r from-yellow-400 to-yellow-600' :
                                    'bg-gradient-to-r from-red-400 to-red-600'
                                  }`}
                                ></div>
                              </div>
                            </div>
                          </div>
                        );
                      })}
                    </div>

                    {/* Improvement Recommendations */}
                    {analysisResults.rating.improvements && analysisResults.rating.improvements.length > 0 && (
                      <div className="mt-6 p-4 bg-amber-50 rounded-lg border border-amber-200">
                        <h4 className="font-semibold text-amber-900 mb-3 flex items-center">
                          <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                          </svg>
                          Key Improvement Areas
                        </h4>
                        <ul className="text-amber-800 text-sm space-y-2">
                          {analysisResults.rating.improvements.map((improvement, index) => (
                            <li key={index} className="flex items-start">
                              <span className="inline-block w-2 h-2 bg-amber-400 rounded-full mt-1.5 mr-3 flex-shrink-0"></span>
                              <span>{improvement}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}

                    {/* Rating Explanation */}
                    {analysisResults.rating.breakdown && (
                      <div className="mt-6 p-4 bg-gray-50 rounded-lg">
                        <h4 className="font-medium text-gray-900 mb-2">Detailed Analysis</h4>
                        <div className="text-gray-700 text-sm whitespace-pre-line">
                          {analysisResults.rating.breakdown}
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

// Enhanced component for displaying formatted content with proper sections and improved typography
const FormattedContent = ({ content }) => {
  if (!content) return null;

  const sections = TextFormatter.formatAsJSXSections(content);
  
  // If no sections were found, display as formatted text with enhanced parsing
  if (sections.length === 0) {
    const structuredContent = TextFormatter.parseStructuredContent(content);
    return <ContentRenderer structuredContent={structuredContent} />;
  }

  // Enhanced icon mapping for different section types
  const getSectionIcon = (header) => {
    const headerLower = header.toLowerCase();
    
    // Technical and Skills
    if (headerLower.includes('technical') || headerLower.includes('programming') || headerLower.includes('software')) return '💻';
    if (headerLower.includes('skills') || headerLower.includes('competencies')) return '🔧';
    
    // Experience and Professional
    if (headerLower.includes('experience') || headerLower.includes('professional') || headerLower.includes('work')) return '💼';
    if (headerLower.includes('career') || headerLower.includes('background')) return '📈';
    
    // Education and Qualifications
    if (headerLower.includes('education') || headerLower.includes('qualification') || headerLower.includes('certification')) return '🎓';
    
    // Soft Skills and Leadership
    if (headerLower.includes('leadership') || headerLower.includes('management')) return '👥';
    if (headerLower.includes('soft') || headerLower.includes('interpersonal')) return '🤝';
    
    // Achievements and Accomplishments
    if (headerLower.includes('achievement') || headerLower.includes('accomplishment') || headerLower.includes('award')) return '🏆';
    
    // Areas for Improvement
    if (headerLower.includes('missing') || headerLower.includes('gap') || headerLower.includes('lacking')) return '⚠️';
    if (headerLower.includes('improvement') || headerLower.includes('suggestion') || headerLower.includes('enhance')) return '💡';
    if (headerLower.includes('weakness') || headerLower.includes('area')) return '�';
    
    // Presentation and Formatting
    if (headerLower.includes('presentation') || headerLower.includes('formatting') || headerLower.includes('visual')) return '🎨';
    
    // Current State and Level
    if (headerLower.includes('current') || headerLower.includes('level') || headerLower.includes('state')) return '📍';
    
    // Growth and Future
    if (headerLower.includes('growth') || headerLower.includes('advancement') || headerLower.includes('development')) return '📈';
    if (headerLower.includes('different') || headerLower.includes('transfer') || headerLower.includes('transition')) return '🔄';
    if (headerLower.includes('emerging') || headerLower.includes('future') || headerLower.includes('potential')) return '🚀';
    
    // Job Titles and Recommendations
    if (headerLower.includes('job') || headerLower.includes('position') || headerLower.includes('role')) return '🎯';
    if (headerLower.includes('recommend') || headerLower.includes('suggest')) return '💼';
    
    return '📌'; // Default icon
  };

  const getGradientColor = (index) => {
    const gradients = [
      'from-blue-50 via-blue-100 to-blue-150 border-blue-300 shadow-blue-100',
      'from-purple-50 via-purple-100 to-purple-150 border-purple-300 shadow-purple-100',
      'from-green-50 via-green-100 to-green-150 border-green-300 shadow-green-100',
      'from-orange-50 via-orange-100 to-orange-150 border-orange-300 shadow-orange-100',
      'from-indigo-50 via-indigo-100 to-indigo-150 border-indigo-300 shadow-indigo-100',
      'from-pink-50 via-pink-100 to-pink-150 border-pink-300 shadow-pink-100',
      'from-teal-50 via-teal-100 to-teal-150 border-teal-300 shadow-teal-100',
      'from-amber-50 via-amber-100 to-amber-150 border-amber-300 shadow-amber-100',
    ];
    return gradients[index % gradients.length];
  };

  return (
    <div className="space-y-8">
      {sections.map((section, index) => (
        <div 
          key={index} 
          className={`bg-gradient-to-br ${getGradientColor(index)} rounded-3xl p-8 border-l-4 shadow-lg hover:shadow-xl transition-all duration-500 transform hover:scale-[1.02] hover:-translate-y-1`}
        >
          {section.header && (
            <div className="flex items-center space-x-4 mb-6 pb-4 border-b border-white/30">
              <div className="flex-shrink-0 w-12 h-12 bg-white/80 rounded-2xl flex items-center justify-center shadow-lg">
                <span className="text-2xl">{getSectionIcon(section.header)}</span>
              </div>
              <h4 className="text-xl font-bold text-gray-900 leading-tight flex-1">
                {section.header}
              </h4>
            </div>
          )}
          <div className="space-y-4">
            <ContentRenderer 
              structuredContent={{
                type: section.contentType,
                content: section.content
              }} 
              isWithinSection={true}
            />
          </div>
        </div>
      ))}
    </div>
  );
};

// Enhanced content renderer component
const ContentRenderer = ({ structuredContent, isWithinSection = false }) => {
  if (!structuredContent || !structuredContent.content) return null;

  // Function to render text with enhanced markdown support
  const renderEnhancedText = (text) => {
    if (!text) return '';
    
    // Handle bold text **text**
    const parts = text.split(/(\*\*.*?\*\*)/g).filter(part => part);
    return parts.map((part, i) => {
      if (part.startsWith('**') && part.endsWith('**')) {
        return <strong key={i} className="font-semibold text-gray-900">{part.slice(2, -2)}</strong>;
      }
      return part;
    });
  };

  const baseCardClass = isWithinSection 
    ? "bg-white/70 backdrop-blur-sm rounded-2xl p-5 border border-white/60 hover:bg-white/90 transition-all duration-300 hover:shadow-md transform hover:scale-[1.01]"
    : "bg-gradient-to-r from-white/80 to-gray-50/80 backdrop-blur-sm rounded-2xl p-6 border border-gray-200/60 hover:shadow-lg transition-all duration-300 transform hover:scale-[1.01]";

  switch (structuredContent.type) {
    case 'list':
      return (
        <div className="space-y-3">
          {structuredContent.items?.map((item, index) => {
            if (item.type === 'item') {
              return (
                <div key={index} className={`${baseCardClass} flex items-start space-x-4`}>
                  <div className="flex-shrink-0 w-8 h-8 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center shadow-md">
                    <span className="text-white text-sm font-bold">•</span>
                  </div>
                  <div className="flex-1 pt-1">
                    <p className="text-gray-800 leading-relaxed font-medium text-base">
                      {renderEnhancedText(item.content)}
                    </p>
                  </div>
                </div>
              );
            } else {
              return (
                <div key={index} className={baseCardClass}>
                  <p className="text-gray-800 leading-relaxed font-medium text-base">
                    {renderEnhancedText(item.content)}
                  </p>
                </div>
              );
            }
          })}
        </div>
      );

    case 'paragraphs':
      return (
        <div className="space-y-4">
          {structuredContent.content.map((paragraph, index) => (
            <div key={index} className={baseCardClass}>
              <p className="text-gray-800 leading-relaxed font-medium text-base">
                {renderEnhancedText(paragraph)}
              </p>
            </div>
          ))}
        </div>
      );

    default:
      // Handle mixed content or enhanced structured content
      if (Array.isArray(structuredContent.content)) {
        return (
          <div className="space-y-4">
            {structuredContent.content.map((item, index) => {
              if (typeof item === 'object' && item.type) {
                switch (item.type) {
                  case 'listItem':
                    return (
                      <div key={index} className={`${baseCardClass} flex items-start space-x-4`}>
                        <div className="flex-shrink-0 w-8 h-8 bg-gradient-to-br from-emerald-500 to-emerald-600 rounded-full flex items-center justify-center shadow-md">
                          <span className="text-white text-sm font-bold">•</span>
                        </div>
                        <div className="flex-1 pt-1">
                          <p className="text-gray-800 leading-relaxed font-medium text-base">
                            {renderEnhancedText(item.content)}
                          </p>
                        </div>
                      </div>
                    );
                  
                  case 'paragraph':
                    return (
                      <div key={index} className={`${baseCardClass} ${item.isPartOfLonger ? 'ml-4 border-l-4 border-blue-300' : ''}`}>
                        <p className="text-gray-800 leading-relaxed font-medium text-base">
                          {renderEnhancedText(item.content)}
                        </p>
                      </div>
                    );
                  
                  default:
                    return (
                      <div key={index} className={baseCardClass}>
                        <p className="text-gray-800 leading-relaxed font-medium text-base">
                          {renderEnhancedText(item.content || item)}
                        </p>
                      </div>
                    );
                }
              } else {
                // Handle string content
                const content = typeof item === 'string' ? item : item.toString();
                const isBulletPoint = /^[-•*]\s+/.test(content);
                
                if (isBulletPoint) {
                  const bulletContent = content.replace(/^[-•*]\s+/, '');
                  return (
                    <div key={index} className={`${baseCardClass} flex items-start space-x-4`}>
                      <div className="flex-shrink-0 w-8 h-8 bg-gradient-to-br from-purple-500 to-purple-600 rounded-full flex items-center justify-center shadow-md">
                        <span className="text-white text-sm font-bold">•</span>
                      </div>
                      <div className="flex-1 pt-1">
                        <p className="text-gray-800 leading-relaxed font-medium text-base">
                          {renderEnhancedText(bulletContent)}
                        </p>
                      </div>
                    </div>
                  );
                } else {
                  return (
                    <div key={index} className={baseCardClass}>
                      <p className="text-gray-800 leading-relaxed font-medium text-base">
                        {renderEnhancedText(content)}
                      </p>
                    </div>
                  );
                }
              }
            })}
          </div>
        );
      } else {
        // Simple text content
        return (
          <div className={baseCardClass}>
            <p className="text-gray-800 leading-relaxed font-medium text-base">
              {renderEnhancedText(structuredContent.content)}
            </p>
          </div>
        );
      }
  }
};

export default ResumeAnalyzer;