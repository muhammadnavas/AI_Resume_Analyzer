import { AlertTriangle, BarChart3, Download, FileText, Key, Lightbulb, Target, TrendingUp } from 'lucide-react';
import { useState } from 'react';
import toast from 'react-hot-toast';
import FileUpload from '../components/FileUpload';
import { useApiKey } from '../context/ApiKeyContext';
import { PDFProcessor } from '../services/pdfProcessor';
import { ResumeAnalyzer as ResumeAnalyzerService } from '../services/resumeAnalyzer';

const ResumeAnalyzer = () => {
  const { geminiApiKey, updateGeminiApiKey, hasGeminiKey } = useApiKey();
  const [tempApiKey, setTempApiKey] = useState('');
  const [file, setFile] = useState(null);
  const [processing, setProcessing] = useState(false);
  const [analysisResults, setAnalysisResults] = useState(null);
  const [activeTab, setActiveTab] = useState('summary');

  const handleApiKeySubmit = (e) => {
    e.preventDefault();
    if (tempApiKey.trim()) {
      updateGeminiApiKey(tempApiKey.trim());
      setTempApiKey('');
      toast.success('API key saved successfully!');
    }
  };

  const handleFileSelect = (selectedFile) => {
    setFile(selectedFile);
    if (analysisResults) {
      setAnalysisResults(null);
    }
  };

  const handleAnalyze = async () => {
    if (!file || !hasGeminiKey) {
      toast.error('Please upload a file and provide a valid API key');
      return;
    }

    setProcessing(true);
    const loadingToast = toast.loading('Analyzing your resume...');

    try {
      // Step 1: Process PDF
      toast.loading('Extracting text from PDF...', { id: loadingToast });
      const pdfData = await PDFProcessor.processResumePDF(file);
      
      // Step 2: Analyze with Gemini
      toast.loading('Performing AI analysis...', { id: loadingToast });
      const analyzer = new ResumeAnalyzerService(geminiApiKey);
      const analysis = await analyzer.performCompleteAnalysis(pdfData.chunks);
      
      // Combine PDF data with analysis
      const results = {
        ...analysis,
        pdfData,
        fileName: file.name
      };
      
      setAnalysisResults(results);
      toast.success('Analysis completed successfully!', { id: loadingToast });
      
    } catch (error) {
      console.error('Analysis error:', error);
      toast.error(error.message || 'Failed to analyze resume', { id: loadingToast });
    } finally {
      setProcessing(false);
    }
  };

  const downloadReport = () => {
    if (!analysisResults) return;
    
    const report = `
RESUME ANALYSIS REPORT
Generated on: ${new Date().toLocaleString()}
File: ${analysisResults.fileName}

OVERALL SCORE: ${analysisResults.rating.overallScore}/10

PROFESSIONAL SUMMARY:
${analysisResults.professionalSummary}

DETAILED ANALYSIS:

SUMMARY:
${analysisResults.summary}

STRENGTHS:
${analysisResults.strengths}

AREAS FOR IMPROVEMENT:
${analysisResults.weaknesses}

JOB TITLE SUGGESTIONS:
${analysisResults.jobTitles}

RATING BREAKDOWN:
- Content Quality: ${analysisResults.rating.contentQuality}/10
- Skills Presentation: ${analysisResults.rating.skillsPresentation}/10
- Experience Description: ${analysisResults.rating.experienceDescription}/10
- Achievement Highlights: ${analysisResults.rating.achievementHighlights}/10
- Education & Certifications: ${analysisResults.rating.educationCertifications}/10
- Overall Professional Impact: ${analysisResults.rating.overallImpact}/10

---
Generated by AI Resume Analyzer - GenAI Hackathon 2025
    `;
    
    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `resume-analysis-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
    toast.success('Report downloaded successfully!');
  };

  const getScoreColor = (score) => {
    if (score >= 8) return 'text-green-600 bg-green-100';
    if (score >= 6) return 'text-yellow-600 bg-yellow-100';
    return 'text-red-600 bg-red-100';
  };

  const getScoreRing = (score) => {
    if (score >= 8) return 'text-green-500';
    if (score >= 6) return 'text-yellow-500';
    return 'text-red-500';
  };

  const tabs = [
    { id: 'summary', label: 'Summary', icon: FileText },
    { id: 'strengths', label: 'Strengths', icon: TrendingUp },
    { id: 'weaknesses', label: 'Improvements', icon: AlertTriangle },
    { id: 'jobs', label: 'Job Suggestions', icon: Target },
    { id: 'rating', label: 'Rating', icon: BarChart3 }
  ];

  if (!hasGeminiKey) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
        <div className="max-w-md w-full bg-white rounded-xl shadow-lg p-8">
          <div className="text-center mb-6">
            <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <Key className="w-8 h-8 text-blue-600" />
            </div>
            <h2 className="text-2xl font-bold text-gray-900 mb-2">API Key Required</h2>
            <p className="text-gray-600">
              Please enter your Google Gemini API key to start analyzing resumes
            </p>
          </div>
          
          <form onSubmit={handleApiKeySubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Google Gemini API Key
              </label>
              <input
                type="password"
                value={tempApiKey}
                onChange={(e) => setTempApiKey(e.target.value)}
                placeholder="Enter your Gemini API key..."
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required
              />
            </div>
            <button
              type="submit"
              className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors duration-200"
            >
              Save API Key
            </button>
          </form>
          
          <div className="mt-6 p-3 bg-blue-50 rounded-lg">
            <p className="text-xs text-blue-700">
              <strong>Note:</strong> Your API key is stored locally and used only for resume analysis. 
              Get your API key from Google AI Studio.
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Resume Analyzer</h1>
          <p className="text-gray-600">
            Upload your resume and get AI-powered insights to improve your career prospects
          </p>
        </div>

        {/* Upload Section */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">Upload Resume</h2>
          <FileUpload 
            onFileSelect={handleFileSelect} 
            isProcessing={processing} 
          />
          
          {file && !processing && (
            <div className="mt-6 flex justify-center">
              <button
                onClick={handleAnalyze}
                disabled={processing || !isApiKeyValid}
                className="bg-blue-600 text-white px-8 py-3 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors duration-200 flex items-center space-x-2"
              >
                <BarChart3 className="w-5 h-5" />
                <span>Analyze Resume</span>
              </button>
            </div>
          )}
        </div>

        {/* Results Section */}
        {analysisResults && (
          <div className="space-y-8">
            {/* Quick Stats */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-semibold text-gray-900">Analysis Results</h2>
                <button
                  onClick={downloadReport}
                  className="flex items-center space-x-2 text-blue-600 hover:text-blue-700 transition-colors"
                >
                  <Download className="w-4 h-4" />
                  <span>Download Report</span>
                </button>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div className="text-center">
                  <div className={`text-3xl font-bold mb-2 ${getScoreRing(analysisResults.rating.overallScore)}`}>
                    {analysisResults.rating.overallScore}/10
                  </div>
                  <div className="text-sm text-gray-600">Overall Score</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-gray-900 mb-2">
                    {analysisResults.pdfData.analysis.wordCount}
                  </div>
                  <div className="text-sm text-gray-600">Words</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-gray-900 mb-2">
                    {analysisResults.pdfData.metadata.pageCount}
                  </div>
                  <div className="text-sm text-gray-600">Pages</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-gray-900 mb-2">
                    {analysisResults.pdfData.analysis.estimatedReadingTime}m
                  </div>
                  <div className="text-sm text-gray-600">Read Time</div>
                </div>
              </div>
            </div>

            {/* Professional Summary */}
            <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-6 border border-blue-200">
              <div className="flex items-center space-x-2 mb-4">
                <Lightbulb className="w-5 h-5 text-blue-600" />
                <h3 className="text-lg font-semibold text-gray-900">Suggested Professional Summary</h3>
              </div>
              <p className="text-gray-700 leading-relaxed italic">
                "{analysisResults.professionalSummary}"
              </p>
            </div>

            {/* Tabs */}
            <div className="bg-white rounded-xl shadow-lg overflow-hidden">
              <div className="border-b border-gray-200">
                <nav className="flex space-x-8 px-6">
                  {tabs.map((tab) => (
                    <button
                      key={tab.id}
                      onClick={() => setActiveTab(tab.id)}
                      className={`py-4 px-1 border-b-2 font-medium text-sm transition-colors duration-200 flex items-center space-x-2 ${
                        activeTab === tab.id
                          ? 'border-blue-500 text-blue-600'
                          : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                      }`}
                    >
                      <tab.icon className="w-4 h-4" />
                      <span>{tab.label}</span>
                    </button>
                  ))}
                </nav>
              </div>

              <div className="p-6">
                {activeTab === 'summary' && (
                  <div className="prose max-w-none">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Resume Summary</h3>
                    <div className="text-gray-700 whitespace-pre-line">
                      {analysisResults.summary}
                    </div>
                  </div>
                )}

                {activeTab === 'strengths' && (
                  <div className="prose max-w-none">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Key Strengths</h3>
                    <div className="text-gray-700 whitespace-pre-line">
                      {analysisResults.strengths}
                    </div>
                  </div>
                )}

                {activeTab === 'weaknesses' && (
                  <div className="prose max-w-none">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Areas for Improvement</h3>
                    <div className="text-gray-700 whitespace-pre-line">
                      {analysisResults.weaknesses}
                    </div>
                  </div>
                )}

                {activeTab === 'jobs' && (
                  <div className="prose max-w-none">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Recommended Job Titles</h3>
                    <div className="text-gray-700 whitespace-pre-line">
                      {analysisResults.jobTitles}
                    </div>
                  </div>
                )}

                {activeTab === 'rating' && (
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-6">Detailed Rating Breakdown</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      {[
                        { key: 'contentQuality', label: 'Content Quality' },
                        { key: 'skillsPresentation', label: 'Skills Presentation' },
                        { key: 'experienceDescription', label: 'Experience Description' },
                        { key: 'achievementHighlights', label: 'Achievement Highlights' },
                        { key: 'educationCertifications', label: 'Education & Certifications' },
                        { key: 'overallImpact', label: 'Overall Professional Impact' }
                      ].map((item) => (
                        <div key={item.key} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                          <span className="text-sm font-medium text-gray-700">{item.label}</span>
                          <span className={`px-3 py-1 rounded-full text-sm font-semibold ${getScoreColor(analysisResults.rating[item.key])}`}>
                            {analysisResults.rating[item.key]}/10
                          </span>
                        </div>
                      ))}
                    </div>
                    
                    <div className="mt-6 p-4 bg-blue-50 rounded-lg">
                      <h4 className="font-medium text-blue-900 mb-2">Rating Explanation</h4>
                      <div className="text-blue-700 text-sm whitespace-pre-line">
                        {analysisResults.rating.breakdown}
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ResumeAnalyzer;